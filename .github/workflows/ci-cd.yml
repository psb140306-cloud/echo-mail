name: Echo Mail CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: 코드 품질 검사 (Linting & Formatting)
  lint:
    name: 코드 품질 검사
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci

      - name: ESLint 실행
        run: npm run lint

      - name: Prettier 포맷 검사
        run: npm run format:check

      - name: TypeScript 타입 검사
        run: npm run type-check

      - name: 코드 품질 결과 업로드
        uses: github/super-linter@v4
        if: always()
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_TYPESCRIPT_STANDARD: true

  # Job 2: 보안 검사 (Security Scanning)
  security:
    name: 보안 검사
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci

      - name: npm audit 실행
        run: npm audit --audit-level=high

      - name: Snyk 보안 스캔
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: CodeQL 분석
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript

      - name: CodeQL 분석 완료
        uses: github/codeql-action/analyze@v2

      - name: OWASP ZAP 베이스라인 스캔
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'

  # Job 3: 단위 테스트 및 통합 테스트
  test:
    name: 테스트 실행
    runs-on: ubuntu-latest
    needs: [lint]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: echomail_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        test-group: [unit, integration, security]

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci

      - name: 환경 변수 설정
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/echomail_test" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=test-secret" >> $GITHUB_ENV

      - name: 데이터베이스 마이그레이션
        run: npx prisma migrate deploy

      - name: 단위 테스트 실행
        if: matrix.test-group == 'unit'
        run: npm run test:unit -- --coverage

      - name: 통합 테스트 실행
        if: matrix.test-group == 'integration'
        run: npm run test:integration -- --coverage

      - name: 보안 테스트 실행
        if: matrix.test-group == 'security'
        run: npm run test:security -- --coverage

      - name: 테스트 결과 업로드
        uses: codecov/codecov-action@v3
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: ${{ matrix.test-group }}

  # Job 4: E2E 테스트 (Playwright)
  e2e:
    name: E2E 테스트
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci

      - name: Playwright 브라우저 설치
        run: npx playwright install --with-deps

      - name: Next.js 빌드
        run: npm run build

      - name: 애플리케이션 시작
        run: npm start &
        env:
          PORT: 3000

      - name: 애플리케이션 준비 대기
        run: npx wait-on http://localhost:3000

      - name: E2E 테스트 실행
        run: npm run test:e2e

      - name: 테스트 결과 아티팩트 업로드
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Job 5: 성능 테스트
  performance:
    name: 성능 테스트
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci

      - name: 성능 테스트 실행
        run: npm run test:performance

      - name: Lighthouse CI 실행
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun

      - name: 성능 리포트 업로드
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-report
          path: |
            .lighthouseci/
            performance-report/
          retention-days: 30

  # Job 6: Docker 이미지 빌드 및 배포
  build-and-deploy:
    name: 빌드 및 배포
    runs-on: ubuntu-latest
    needs: [lint, security, test, e2e]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: Container Registry 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 메타데이터 추출
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 이미지 보안 스캔
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 보안 스캔 결과 업로드
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 7: 스테이징 배포
  deploy-staging:
    name: 스테이징 배포
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: github.ref == 'refs/heads/develop'

    environment:
      name: staging
      url: https://staging.echomail.app

    steps:
      - name: 스테이징 서버 배포
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/echomail
            docker-compose pull
            docker-compose down
            docker-compose up -d
            docker system prune -f

      - name: 헬스체크
        run: |
          sleep 30
          curl -f https://staging.echomail.app/api/health || exit 1

      - name: 스모크 테스트
        run: npm run test:smoke -- --baseURL=https://staging.echomail.app

  # Job 8: 프로덕션 배포
  deploy-production:
    name: 프로덕션 배포
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: github.event_name == 'release'

    environment:
      name: production
      url: https://echomail.app

    steps:
      - name: 프로덕션 배포 승인 대기
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: admin1,admin2
          minimum-approvals: 2

      - name: Blue-Green 배포 시작
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/echomail
            ./scripts/blue-green-deploy.sh ${{ github.sha }}

      - name: 프로덕션 헬스체크
        run: |
          sleep 60
          curl -f https://echomail.app/api/health || exit 1

      - name: 프로덕션 스모크 테스트
        run: npm run test:smoke -- --baseURL=https://echomail.app

      - name: 롤백 준비
        if: failure()
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/echomail
            ./scripts/rollback.sh

  # Job 9: 알림 및 리포팅
  notify:
    name: 배포 알림
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Slack 알림
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

      - name: Teams 알림
        if: failure()
        uses: skitionek/notify-microsoft-teams@master
        with:
          webhook_url: ${{ secrets.TEAMS_WEBHOOK }}
          needs: ${{ toJson(needs) }}

      - name: 배포 메트릭 전송
        run: |
          curl -X POST ${{ secrets.METRICS_ENDPOINT }} \
            -H "Content-Type: application/json" \
            -d '{
              "deployment": {
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'",
                "status": "${{ job.status }}",
                "version": "${{ github.sha }}",
                "environment": "${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}"
              }
            }'
