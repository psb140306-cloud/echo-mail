version: '3.8'

services:
  # =============================================================================
  # Echo Mail Web Application (Production)
  # =============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: echomail-app-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
    ports:
      - '3000:3000'
    env_file:
      - .env
    volumes:
      - ./uploads:/app/uploads:rw
      - ./logs:/app/logs:rw
    depends_on:
      - postgres
      - redis
    networks:
      - echomail-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # =============================================================================
  # Background Worker (Email Processing)
  # =============================================================================
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: echomail-worker
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - WORKER_TYPE=email_processor
    env_file:
      - .env
    volumes:
      - ./uploads:/app/uploads:rw
      - ./logs:/app/logs:rw
    depends_on:
      - postgres
      - redis
    networks:
      - echomail-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # =============================================================================
  # Mail Monitor Service
  # =============================================================================
  mail-monitor:
    build:
      context: .
      dockerfile: Dockerfile.mail-monitor
    container_name: echomail-mail-monitor
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVICE_TYPE=mail_monitor
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs:rw
    depends_on:
      - postgres
      - redis
    networks:
      - echomail-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # =============================================================================
  # PostgreSQL Database (Production)
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: echomail-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-echomail}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: '--encoding=UTF8 --locale=C'
    ports:
      - '5432:5432'
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./backups:/backups
    networks:
      - echomail-network
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER:-postgres}']
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # =============================================================================
  # Redis Cache/Session Store (Production)
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: echomail-redis-prod
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data_prod:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - echomail-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # =============================================================================
  # Nginx Reverse Proxy (Production)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: echomail-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - echomail-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  # =============================================================================
  # Log Aggregator (Optional)
  # =============================================================================
  log-aggregator:
    image: fluent/fluentd:v1.16-1
    container_name: echomail-fluentd
    restart: unless-stopped
    volumes:
      - ./docker/fluentd/fluent.conf:/fluentd/etc/fluent.conf
      - ./logs:/fluentd/log
    ports:
      - '24224:24224'
    networks:
      - echomail-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

# =============================================================================
# Networks
# =============================================================================
networks:
  echomail-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/echomail/data/postgres

  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/echomail/data/redis